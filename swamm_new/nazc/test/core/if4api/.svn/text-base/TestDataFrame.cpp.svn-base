
#include <stdio.h>
#include <string.h>

#include <UnitTest++.h>

#include "typedef.h"
#include "IF4DataFrame.h"
#include "MemoryDebug.h"

static BYTE shortStr[] = { 
        0x5E, 0x00, 0x80, 0x04, 0x00, 
        0x00, 0x00, 0x00, 0x05, 0x01, 
        0x00, 0x00, 0xD1, 0x8D };

static BYTE longStr[] = {
    0x5E, 0x00, 0x03, 0x4C, 0x01, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 
    0x82, 0x01, 0x00, 0x00, 0x81, 0x00, 0x03, 0x00, 0x01, 0x04, 0x00, 0x01, 
    0x00, 0x01, 0x01, 0x06, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 
    0x0B, 0x00, 0x2C, 0x01, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
    0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 
    0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
    0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 
    0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
    0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 
    0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
    0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 
    0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
    0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 
    0x36, 0x37, 0x38, 0x39, 0x66, 0xD2
};


static BYTE compStr[] = {
    0x5E, 0x00, 0x07, 0x33, 0x00, 0x00, 0x00, 0x43, 0x78, 0x9C, 0x63, 0x60, 
    0x60, 0x60, 0x68, 0x62, 0x64, 0x60, 0x68, 0x64, 0x60, 0x66, 0x60, 0x64, 
    0x61, 0x60, 0x64, 0x60, 0x64, 0x64, 0x63, 0x00, 0xD1, 0x0C, 0x0C, 0x8C, 
    0xDC, 0x0C, 0x3A, 0x8C, 0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 
    0x16, 0x96, 0xA3, 0x2C, 0x42, 0x2C, 0x00, 0xCE, 0x9F, 0x3E, 0xDA, 0xB8, 
    0x36
};

struct DataFrameFixture {
    DataFrameFixture () {
        shortLen = sizeof(shortStr);
        longLen = sizeof(longStr);
        compLen = sizeof(compStr);

        memcpy(testShortStr, shortStr, shortLen);
        memcpy(testLongStr, longStr, longLen);
        memcpy(testCompStr, compStr, compLen);

        shortHeader = (IF4_HEADER *) testShortStr;
        longHeader = (IF4_HEADER *) testLongStr;
        compHeader = (IF4_HEADER *) testCompStr;
    }
    ~DataFrameFixture () {}

    BYTE testShortStr[sizeof(shortStr)];
    BYTE testLongStr[sizeof(longStr)];
    BYTE testCompStr[sizeof(compStr)];
    IF4_HEADER * shortHeader;
    IF4_HEADER * longHeader;
    IF4_HEADER * compHeader;
    int shortLen;
    int longLen;
    int compLen;
};

/** core/if4api module test.
 */
SUITE(IF4DataFrame)
{

TEST_FIXTURE(DataFrameFixture, MakeIF4Header)
{ 
    MakeIF4Header(shortHeader, 0x00, 0x80, shortLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL) , 0x00);
    CHECK_ARRAY_EQUAL(shortStr, testShortStr, shortLen);
}

TEST_FIXTURE(DataFrameFixture, MakeIF4Tail)
{ 
    MakeIF4Tail(shortHeader, shortLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL));
    CHECK_ARRAY_EQUAL(shortStr, testShortStr, shortLen);
}

TEST_FIXTURE(DataFrameFixture, MakeCompressFrame)
{ 
    /** 압축하지 않았을 때 */
    MakeCompressFrame(shortHeader, shortLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL), FALSE);
    CHECK_ARRAY_EQUAL(shortStr, testShortStr, shortLen);

    /** 압축했을 때 - 너무 작아서 압축되지 않았을 때 */
    MakeCompressFrame(shortHeader, shortLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL), TRUE);
    CHECK_ARRAY_EQUAL(shortStr, testShortStr, shortLen);
    CHECK(!(shortHeader->attr & IF4_ATTR_COMPRESS));

    /** 길지만 압축하지 않았을 때  */
    MakeCompressFrame(longHeader, longLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL), FALSE);
    CHECK_ARRAY_EQUAL(longStr, testLongStr, longLen);
    CHECK(!(longHeader->attr & IF4_ATTR_COMPRESS));

    /** 압축했을 때 - 압축된 상태 */
    MakeCompressFrame(longHeader, longLen - sizeof(IF4_HEADER) - sizeof(IF4_TAIL), TRUE);
    CHECK_ARRAY_EQUAL(compStr, testLongStr, compLen);
    CHECK(longHeader->attr & IF4_ATTR_COMPRESS);
}

} // End of Suite
